process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
library(tidyverse)
options(scipen=999)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
library(readxl)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"))
df
View(df)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop.csv"))
df_ctgan
df_merge <- rbind(df_ctgan,df_synthpop)
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
# geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
duration = "duration/"
setwd(main_dir)
# Synthesize data grid ----
# Dimensions
rows = c(1000, 5000) # Rows/observations
cols = c(10, 15, 20) # Columns/variables
vals = c(15)  # Number of possible options for each character
copies <- c(1)
my.seed = 1230
df_duration <- data.frame(
type = as.character(),
rows = as.numeric(),
cols = as.numeric(),
vals = as.numeric(),
n = as.numeric(),
duration = as.numeric()
)
for (r in rows) {
for (c in cols) {
for (v in vals) {
print(paste(r, c, v,sep = ","))
df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,"_vals_",v,".csv"))
my.seed <- my.seed + 1
time_start <- proc.time()
sds.default <- syn(df_ods,
m = copies,
seed = my.seed)
time_end <- proc.time()
time_duration <- as.numeric(time_end[1] - time_start[1])
output = data.frame(type="synthpop",
rows=r,
cols=c,
vals=v,
n=copies,
duration=time_duration)
df_duration <- rbind(df_duration,output)
for (j in 1:copies) {
synthpop_df <- sds.default$syn[j]
write.csv(synthpop_df, file = paste0(synthetic_data,"sds_synthpop_rows_",r,"_cols_",c,"_vals_",v,"_n_",j,".csv"), row.names = FALSE)
}
}
}
}
write.csv(df_duration, file = paste0(duration,"duration_synthpop.csv"), row.names = FALSE)
df_duration
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_ctgan
df_merge <- rbind(df_ctgan,df_synthpop)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop.csv"))
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"), sep = ",")
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"), sep = ",")
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"), sep = ";")
df_synthpop
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"), sep = ",")
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"), quote = "")
df_merge <- rbind(df_ctgan,df_synthpop)
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_merge <- rbind(df_ctgan,df_synthpop)
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
# geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_merge <- rbind(df_ctgan,df_synthpop)
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
# geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_merge <- rbind(df_ctgan,df_synthpop,df_datasynthesizer)
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "N:/Ablagen/D01700-KEM/Latner/simulation/"
main_dir = "/Users/jonathanlatner/Google Drive/My Drive/IAB/drechsler_latner_2023/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_merge <- rbind(df_ctgan,df_synthpop,df_datasynthesizer)
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_wrap( ~ rows + cols, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_wrap(rows ~ cols, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_wrap( ~ rows + cols, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_wrap( ~ rows + cols, scales = "free", labeller = labeller(.cols = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
cols
grid
grid
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_grid(rows ~ cols, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_merge, aes(x = vals, y = duration, color = type)) +
geom_line(linewidth = 1) +
# geom_point(size = 2) +
facet_grid(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("# values per column") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
