# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
library(tidyverse)
options(scipen=999)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
library(readxl)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"))
df
View(df)
reticulate::repl_python()
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
df_duration <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
)
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
df_duration$rows <- as.factor(df_duration$rows)
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + batch_size, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_compare_ctgan_duration.pdf"), height = 6, width = 10)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
df_duration <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
)
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
df_duration$rows <- as.factor(df_duration$rows)
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + batch_size, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_compare_ctgan_duration.pdf"), height = 6, width = 10)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
df_duration <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
)
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
df_duration$rows <- as.factor(df_duration$rows)
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + batch_size, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_compare_ctgan_duration.pdf"), height = 6, width = 10)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_specks_200000_10 <- read.csv(paste0(tables,"utility_ctgan_specks_rows_200000_cols_10.csv"))
df_specks_200000_15 <- read.csv(paste0(tables,"utility_ctgan_specks_rows_200000_cols_15.csv"))
df_specks_200000_20 <- read.csv(paste0(tables,"utility_ctgan_specks_rows_200000_cols_20.csv"))
df_specks_100000 <- read.csv(paste0(tables,"utility_ctgan_specks_rows_100000.csv"))
df_specks_50000 <- read.csv(paste0(tables,"utility_ctgan_specks_rows_50000.csv"))
df_specks <- rbind(df_specks_50000,df_specks_100000,df_specks_200000_10,df_specks_200000_15,df_specks_200000_20) %>%
arrange(batch, epochs)
# Graph data ----
df_specks$epochs <- as.factor(df_specks$epochs)
df_specks$rows <- as.factor(df_specks$rows)
df_fastest <- df_specks %>%
group_by(cols, rows) %>%
mutate(fast = min(specks)) %>%
filter(specks == fast) %>%
ungroup()
df_fastest
df_graph <- ggplot(df_specks, aes(x = epochs, y = specks)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + batch, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Kolmogorov-Smirnov") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_compare_ctgan_specks.pdf"), height = 6, width = 10)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
df_duration <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
)
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
df_duration$rows <- as.factor(df_duration$rows)
sum(df_duration$duration)
sum(df_duration$duration)/3
group_by(df_duration,rows) %>%
mutate(sum(duratinon))
group_by(df_duration,rows) %>%
mutate(sum(duration))
group_by(df_duration,rows) %>%
summarise(sum(duration))
group_by(df_duration,rows) %>%
summarise(mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration)) %>%
mutate(mean=mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration)) %>%
mutate(mean=mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration)) %>%
mutate(avg=mean(durati))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration)) %>%
mutate(avg=mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean(duration))  %>%
ungroup() %>%
mutate(avg=mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean=mean(duration))  %>%
ungroup() %>%
mutate(avg=mean(duration))
group_by(df_duration,rows, cols) %>%
summarise(mean=mean(duration))  %>%
ungroup() %>%
mutate(avg=mean(mean))
group_by(df_duration,rows, cols) %>%
summarise(mean=mean(duration))  %>%
ungroup()
group_by(df_duration,rows, cols) %>%
summarise(mean=mean(duration))  %>%
ungroup() %>%
mutate(total=sum(mean))
group_by(df_duration,rows, cols) %>%
summarise(sum=sum(duration))  %>%
ungroup() %>%
mutate(total=sum(mean))
group_by(df_duration,rows, cols) %>%
summarise(sum=sum(duration))  %>%
ungroup() %>%
mutate(total=sum(sum))
group_by(df_duration,rows, cols) %>%
summarise(sum=sum(duration))  %>%
ungroup() %>%
mutate(total=avg(sum))
group_by(df_duration,rows, cols) %>%
summarise(sum=sum(duration))  %>%
ungroup() %>%
mutate(total=mean(sum))
6*
9
